<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Useful Information | Jamie's Space]]></title>
  <link href="http://jamiepenney.github.io/categories/useful-information/atom.xml" rel="self"/>
  <link href="http://jamiepenney.github.io/"/>
  <updated>2014-05-16T09:43:05+12:00</updated>
  <id>http://jamiepenney.github.io/</id>
  <author>
    <name><![CDATA[Jamie Penney]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting the most out of Heroku's freebies]]></title>
    <link href="http://jamiepenney.github.io/2012/10/04/getting-the-most-out-of-herokus-freebies/"/>
    <updated>2012-10-04T02:05:10+13:00</updated>
    <id>http://jamiepenney.github.io/2012/10/04/getting-the-most-out-of-herokus-freebies</id>
    <content type="html"><![CDATA[<p>I used to use <a href="http://www.heroku.com">Heroku</a> a few years back whenever I needed a little bit of Ruby on Rails hosting, but then I started needing background workers (which you can't get for free) and larger databases so I shifted to self-hosting. I already had a Rimuhosting VPS, so it didn't make sense to spend money when I didn't need to.</p>

<p>I've gotten sick of having to write cron jobs and organise monitoring and all that sort of busy work for what are pretty basic sites, so I decided to have another shot at using Heroku.</p>

<p>Turns out my current side project (a place my family and I can record and share our weight loss goals) fits within the free tier for everything except for the email notification jobs. Drat. Luckily I can minimise the cost of this by using a gem called <a href="https://github.com/meskyanichi/hirefire">HireFire</a>. I will only need maybe a few minutes of worker time per month, and this gem will make sure that workers are spun up and down as needed so I don't waste any money I don't need to.</p>

<p>On top of that, there are a number of free <a href="https://addons.heroku.com/">Heroku Addons</a> that can keep everything speedy on a low use site. The <a href="https://addons.heroku.com/memcache">Memcache</a> addon has a 5MB free option that you can hook into Rack::Cache and Rails for faster caching. If you are on a small site you will still get a bit of extra speed out of that.</p>

<p>This next trick is a bit cheeky, but it kinda fits with my monitoring needs any way. The <a href="https://addons.heroku.com/newrelic">New Relic</a> addon offers uptime monitoring (as well as short term site performance stats), which it gives you by pinging your site on a scheduled basis. This has the side effect of keeping your app running - Heroku will shut down a free site that hasn't been hit in a while. Still not sure if I'm ok with this or not...</p>

<p>There is one more thing you might overlook - Gzip compression of static assets. Heroku's Cedar stack serves requests directly (see the <a href="https://devcenter.heroku.com/articles/http-routing">HTTP Routing documentation</a>)to the application stack, so you don't get HTTP caching or gzip compression for free. Your app needs to handle these itself, but this is relatively easy. You need two pieces of Rack middleware: Rack::Cache and Rack::Deflater.</p>

<p>For Rack::Cache you will need to add the Memcache addon to your app in Heroku, install the <a href="https://github.com/mperham/dalli">dalli</a> gem and setup the Rack::Cache middleware to use it by adding this to your <code>config/environment/production.rb</code> file:</p>

<p><code>config.middleware.use Rack::Cache,
:metastore =&gt; "memcached://#{ENV['MEMCACHE_SERVERS']}",
:entitystore =&gt; "memcached://#{ENV['MEMCACHE_SERVERS']}"
</code>
While you are there, set the cache store to use Dalli as well with <code>config.cache_store = :dalli_store</code></p>

<p>Using Rack::Deflater is easy as pie. In <code>config.ru</code> add the following right above your <code>run MyApp::Application</code> line:
<code>
use Rack::Deflater
</code>
In theory you shouldn't need to do this. Rails 3.1 added Rack::Deflater by default, but the Cedar stack on Heroku <a href="http://stackoverflow.com/questions/7824570/heroku-conflict-between-gzipping-assets-and-precompiling-assets">doesn't seem to do it</a>. An unfortunate side effect of adding Deflater this way is it will gzip everything, including images. I'm still thinking of a way to get around this, probably with my own middleware wrapper around Deflater.</p>

<p>That's all I've done so far and things are pretty snappy. If you have any other tips for making the most out of Heroku, let me know in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting SimpleCov and Spork to play together]]></title>
    <link href="http://jamiepenney.github.io/2011/09/28/getting-simplecov-and-spork-to-play-together/"/>
    <updated>2011-09-28T06:12:17+13:00</updated>
    <id>http://jamiepenney.github.io/2011/09/28/getting-simplecov-and-spork-to-play-together</id>
    <content type="html"><![CDATA[<p>I have been using <a href="https://github.com/colszowka/simplecov">SimpleCov</a> to measure the code coverage of my specifications, and it has been excellent. I would recommend it, if only for how easy it was to get it working with RSpec.</p>

<p>I have run into one problem though - running it under <a href="https://github.com/timcharper/spork">Spork</a> generates no results! As far as I can tell, this is a problem with the way Spork caches your application files. SimpleCov uses the Ruby 1.9 built in profiling features, and either 1.9 or Spork need the files under inspection to be loaded after the profiling has started. Unfortunately your application files aren't reloaded when you are using Spork, that's kind of the point!</p>

<p>Some people seem to be able to get away with merely turning off application file caching in <code>config/environments/test.rb</code>, but that didn't work for me. Instead, I have come up with a different solution: Only turn on code coverage reporting when I run RSpec outside of Spork. At the top of <code>spec/spec_helper.rb</code> I have the following block:</p>

<pre><code>if(ENV["RUN_COVERAGE"])
  require 'simplecov'
  SimpleCov.start 'rails' do
    add_filter "/spec/"
  end
  puts "Running coverage tool\n"
end
</code></pre>

<p>That way I can run <code>RUN_COVERAGE=true rspec spec/</code> in the root of my application directory, and RSpec will run with SimpleCov enabled. As an added bonus, the code coverage metrics aren't running on every test run, so my tests are faster!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 3 Form builder for Twitter Bootstrap form elements]]></title>
    <link href="http://jamiepenney.github.io/2011/09/24/rails-3-form-builder-for-twitter-bootstrap-form-elements/"/>
    <updated>2011-09-24T05:41:42+12:00</updated>
    <id>http://jamiepenney.github.io/2011/09/24/rails-3-form-builder-for-twitter-bootstrap-form-elements</id>
    <content type="html"><![CDATA[<p><strong>Edit: I have updated this for Bootstrap 2. See the links at the bottom of the page for both versions.</strong></p>

<p>I have been working on a website in my spare time to help me organise my life a bit better, and one of the things that always trips me up with these kinds of projects is the visual style. For a while I had a basic fixed width style I used, but it didn't really fit properly with what I wanted to build. A little while after I had started, Twitter released <a href="http://twitter.github.com/bootstrap/">Bootstrap</a>, a nice looking CSS framework. I decided to have a go at using it on my site (in a separate git branch of course) and it ended up only taking me less than an hour to get it all up and looks alright.</p>

<p>One thing that bothered me though was the repetition in my forms - the format for showing labels that line up nicely next to the form elements was the same across all input types, and so was the error handling. This got me thinking: why should I retype all of this when the Rails FormBuilder class is already doing half the work? Surely I could just override some of the methods to make this work?</p>

<p>I needed to learn more about Ruby metaprogramming to get it to work - I still wanted the core functionality of the default rails FormBuilder, just with some extra DOM nodes wrapped around it. Ruby lets you redefine methods at runtime, but also allows you to alias the old methods so you can refer to them inside your new version of the method. So I ended up writing a method that does the Bootstrap boilerplate DOM wrapper creation and calls the original method to generate the input element itself.</p>

<p>I still haven't overridden all of the FormBuilder methods because I need to actually test them (and I don't have a use for them yet), but the basics are here in this Gist: <a href="https://gist.github.com/1236567">https://gist.github.com/1236567</a>. The methods I have overridden are in basic_helpers, the ones that output multiple inputs are in multipart_helpers. The great thing is I have only had to add method names to those two arrays as needed - none of the input types have needed special casing. This might not be the case for all of them, but one can only hope. If you do find this useful, or want to add and test some more of the helpers, please fork my Gist and leave me a comment.</p>

<p><strong>Edit:</strong> Here are links to both the v1 and v2 form builders:</p>

<p>Version 1 form builder:
<a href="https://gist.github.com/1236567">https://gist.github.com/1236567</a>
Version 2 form builder:
<a href="https://gist.github.com/1829710">https://gist.github.com/1829710</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows 7 Shortcut Keys]]></title>
    <link href="http://jamiepenney.github.io/2009/09/15/windows-7-shortcut-keys/"/>
    <updated>2009-09-15T00:19:29+12:00</updated>
    <id>http://jamiepenney.github.io/2009/09/15/windows-7-shortcut-keys</id>
    <content type="html"><![CDATA[<p>I found a great list of keyboard shortcuts for Windows 7 today <a href="http://www.mydigitallife.info/2009/07/31/windows-7-keyboard-shortcuts-accelerator-keys-or-hotkeys-full-listing/">here</a>. The best part of this list were the keys for manipulating windows - Windows + Left Arrow will dock the window to the left hand side of the screen, much like if you drag the window to the side of the screen. The right arrow also works like this.</p>

<p>If you have multiple monitors, using the mouse it doesn't let you dock to the side connected to the other screen. So you can only dock to the far left and far right with the mouse. Not so with the keyboard. Each time you hit the keyboard combo, it will move it to the next dock position in that direction. That means you can have windows docked all over your extended desktop, like so:</p>

<p><a href="http://jamiepenney.co.nz/wp-content/uploads/2009/09/desktop.png"><img src="http://jamiepenney.co.nz/wp-content/uploads/2009/09/desktop-300x106.png" alt="Desktop" /></a></p>

<p>I've got two windows on each screen (as you can see, the right hand screen has the task bar, so you should be able to see where the screens split).</p>

<p>This is pretty useful at home. Having huge screens is great, being able to have 4 docked windows without fiddling around with the mouse is fantastic.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Strange Visual Studio lockup after debugging]]></title>
    <link href="http://jamiepenney.github.io/2009/07/21/strange-visual-studio-lockup-after-debugging/"/>
    <updated>2009-07-21T11:03:51+12:00</updated>
    <id>http://jamiepenney.github.io/2009/07/21/strange-visual-studio-lockup-after-debugging</id>
    <content type="html"><![CDATA[<p>I had been having an issue with VS 2008 on Windows 7 x64 today. After debugging an application the whole IDE would lock up, minimise itself, then bring itself back to the foreground. This was pretty disruptive and I was getting quite irritated with it, but I could not find any mention of it through Google.</p>

<p>I did happen to stumble upon a StackOverflow question (<a href="http://stackoverflow.com/questions/126472/how-to-stop-right-click-dead-locking-visual-studio-2008/344323#344323">here</a>) where a different problem was outlined, however this answer reminded me of an issue Scott Hanselman had with an app he was doing a demo with, so I thought I would give it the fix a shot. Strangely enough, I think it has fixed it, although I am not sure why (it seems unrelated). Anyway, here is the fix, just in case anyone else has a similar problem:</p>

<p><strong>Fix:</strong>
Disable checking of Publisher's Certificate Revocation</p>

<ol>
<li><p>Go to Internet Options in Internet Explorer or Control Panel</p></li>
<li><p>Then go the Security Tab, scroll towards the bottom</p></li>
<li><p>Uncheck the 'Check for Publisher's Certificate Revocation'  checkbox</p></li>
<li><p>Click OK.</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
